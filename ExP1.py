import math
import random
#chatgpt was consulted to help create this code.
#Previous homework 3 was used as refference
#Dr. Smays homework 3 solution was used as refference.

def truncated_lognormal_sample(mu, sigma, d_min, d_max, size=1):
    """
    Generate 'size' samples from a log-normal distribution truncated
    to the interval [d_min, d_max].

    The log-normal variable D is generated by first drawing Z ~ N(mu, sigma)
    and then setting D = exp(Z). Any draw that falls outside [d_min, d_max]
    is rejected and re-drawn.

    Args:
        mu (float): Mean of ln(D), i.e. the μ in N(μ,σ).
        sigma (float): Std. dev. of ln(D), i.e. the σ in N(μ,σ).
        d_min (float): Minimum rock diameter allowed.
        d_max (float): Maximum rock diameter allowed.
        size (int): Number of valid samples to return.

    Returns:
        list: A list of 'size' floating-point values drawn from the truncated
              log-normal distribution.
    """
    samples = []
    while len(samples) < size:
        # Draw from the underlying normal in the log domain
        z = random.gauss(mu, sigma)  # z ~ N(mu, sigma)
        d = math.exp(z)  # Convert to log-normal
        if d_min <= d <= d_max:
            samples.append(d)
    return samples


def mean_variance(data):
    """
    Calculate the mean and variance of a list of numbers.

    Args:
        data (list of float): A list of numerical data.

    Returns:
        tuple: (mean, variance). If data is empty, returns (None, None).
        also establishes deg of freedom
    """
    n = len(data)
    if n == 0:
        return (None, None)
    m = sum(data) / n
    var = sum((x - m) ** 2 for x in data) / n
    return m, var


def main():
    """
    Main function that:
      1) Solicits user input for μ, σ, D_min, D_max (with defaults).
      2) Generates 11 samples of size N=100 from the truncated log-normal distribution.
      3) Computes and prints the sample mean and variance for each sample.
      4) Computes and prints the mean and variance of the sampling means.

    Assumptions:
      - Rocks are spherical, but we only track their diameters.
      - The initial (pre-sieving) distribution is log-normal with user-specified μ and σ.
      - Sieving imposes a minimum and maximum size (D_min, D_max).
      - We use acceptance-rejection to simulate from the truncated log-normal.
    """
    # --- Solicit user input, with suggested defaults ---
    try:
        mu_str = input("Enter the mean of ln(D) (μ), default=0: ").strip()
        mu = float(mu_str) if mu_str else 0.0

        sigma_str = input("Enter the std. dev. of ln(D) (σ), default=1: ").strip()
        sigma = float(sigma_str) if sigma_str else 1.0

        dmin_str = input("Enter the minimum diameter (D_min), default=0.5: ").strip()
        d_min = float(dmin_str) if dmin_str else 0.5

        dmax_str = input("Enter the maximum diameter (D_max), default=2.0: ").strip()
        d_max = float(dmax_str) if dmax_str else 2.0

    except ValueError:
        print("Invalid input. Using fallback defaults: μ=0, σ=1, D_min=0.5, D_max=2.0")
        mu, sigma, d_min, d_max = 0.0, 1.0, 0.5, 2.0

    # Number of samples and sample size
    SAMPLES = 11
    N = 100

    sample_means = []
    sample_vars = []

    # Generate and process the 11 samples
    for i in range(SAMPLES):
        # Draw N=100 truncated log-normal samples
        rocks = truncated_lognormal_sample(mu, sigma, d_min, d_max, size=N)
        sm, sv = mean_variance(rocks)
        sample_means.append(sm)
        sample_vars.append(sv)

    # Now compute stats of the sampling means
    mean_of_means, var_of_means = mean_variance(sample_means)

    # Print sample-level stats
    print("\nIndividual Sample Statistics:")
    for i in range(SAMPLES):
        print(f"  Sample {i + 1}: mean={sample_means[i]:.5f}, variance={sample_vars[i]:.5f}")

    # Print aggregated stats
    print("\nSampling Mean Statistics:")
    print(f"  Mean of the 11 sample means: {mean_of_means:.5f}")
    print(f"  Variance of the 11 sample means: {var_of_means:.5f}")


if __name__ == "__main__":
    main()


